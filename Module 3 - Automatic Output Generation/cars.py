#!/usr/bin/env python3

import json
import locale
import sys
import os
import reports
import emails
from operator import itemgetter

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums. Namely, the car with the
  most revenue, the car with the most sales, and the car year with the
  most sales.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0}
  car_year_sales = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    if item["total_sales"] > max_sales["sales"]:
      item["sales"] = item["total_sales"]
      max_sales = item

    year = item["car"]["car_year"]
    car_year_sales[year] = car_year_sales.get(year, 0) + item["total_sales"]

  best_car_year = {"sales": 0}
  for car_year, sales in car_year_sales.items():
    if sales > best_car_year["sales"]:
      best_car_year["car_year"] = car_year
      best_car_year["sales"] = sales

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["sales"]),
    "The most popular year was {} with {} sales.".format(
      best_car_year["car_year"], best_car_year["sales"])
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists, sorted by total sales."""
  table_data = []
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  table_data = sorted(table_data, reverse=True, key=itemgetter(3))
  table_data.insert(0, ["ID", "Car", "Price", "Total Sales"])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  table_data = cars_dict_to_table(data)
  reports.generate("/tmp/cars.pdf", "Sales summary for last month",
    "<br/>".join(summary), table_data)

  # Attach the report to an email and send it
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  message = emails.generate(sender, receiver, subject, "\n".join(summary), "/tmp/cars.pdf")
  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)
